package textEditor;

public class MainTextEditor {

	public static void main(String[] args) {
		
		new TextEditor(); 

	}

}

package textEditor;

import java.awt.*;
import java.awt.event.*;
import java.io.*;

import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.filechooser.FileNameExtensionFilter;

import java.util.*;


public class TextEditor extends JFrame implements ActionListener{

	JTextArea textArea;
	JScrollPane scrollpane;
	JSpinner fontSizeSpinner;
	JLabel fontlabel;
	JButton fontColorButton;
	JComboBox fontBox;
	JMenuBar menubar;
	JMenu filemenu;
	JMenuItem saveItem;
	JMenuItem openItem;
	JMenuItem exitItem;
	
	
	
	
	TextEditor()
	{
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		this.setTitle("Safaid Text Editor");
		this.setSize(500, 500);
		this.setLayout(new FlowLayout());
		this.setLocationRelativeTo(null);
		
		// for textArea
		textArea=new JTextArea();
		textArea.setLineWrap(true);
		textArea.setWrapStyleWord(true);
		textArea.setFont(new Font("Arial",Font.PLAIN,20));
		
		// For Scrollbar 
		scrollpane=new JScrollPane(textArea);
		scrollpane.setPreferredSize(new Dimension(480,480));
		scrollpane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
		
		fontlabel=new JLabel("Font : ");
		
		fontColorButton = new JButton("Color");
		fontColorButton.addActionListener(this);
		
		String[] fonts= GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();
		
		fontBox = new JComboBox(fonts);
		fontBox.addActionListener(this);
		fontBox.setSelectedItem("Arial");
		
		
		// .......MenuBar.........
		menubar=new JMenuBar();
		filemenu = new JMenu("File");
		openItem = new JMenuItem("Open");
		saveItem = new JMenuItem("Save");
		exitItem = new JMenuItem("Exit");
		
		openItem.addActionListener(this);
		saveItem.addActionListener(this);
		exitItem.addActionListener(this);
		
		filemenu.add(openItem);
		filemenu.add(saveItem);
		filemenu.add(exitItem);
		menubar.add(filemenu);
		
		
		// .......MenuBar.........
		
		// Change Font Size  Logic
		fontSizeSpinner = new JSpinner();
		fontSizeSpinner.setPreferredSize(new Dimension(50,25));
		fontSizeSpinner.setValue(20);
		fontSizeSpinner.addChangeListener(new ChangeListener() {

			@Override
			public void stateChanged(ChangeEvent e) {
				textArea.setFont(new Font(textArea.getFont().getFamily(),Font.PLAIN,(int) fontSizeSpinner.getValue()));
				
			}
			
		});
		this.setJMenuBar(menubar);
		this.add(fontColorButton);
		this.add(fontlabel);
		this.add(fontSizeSpinner);
		this.add(fontBox);
		this.add(scrollpane);
		this.setVisible(true);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		
		if(e.getSource()==fontColorButton)
		{
			JColorChooser colorChooser=new JColorChooser();
			
			Color color=colorChooser.showDialog(null, "Chose a Color", Color.BLACK);
			
			textArea.setForeground(color);
		}
		if(e.getSource()==fontBox)
		{
			textArea.setFont(new Font((String) fontBox.getSelectedItem(),Font.PLAIN,textArea.getFont().getSize()));
		}
		
		if(e.getSource()== openItem)
		{
			JFileChooser filechooser=new JFileChooser();
			filechooser.setCurrentDirectory(new File("."));
			
			FileNameExtensionFilter filter = new FileNameExtensionFilter("Text File ","txt");
			filechooser.setFileFilter(filter);
			
			int response=filechooser.showOpenDialog(null);
			
			if(response== JFileChooser.APPROVE_OPTION)
			{
				
				File file = new File(filechooser.getSelectedFile().getAbsolutePath());
				Scanner fileIn = null;
				
				
				try {
					fileIn=new Scanner(file);
					if(file.isFile())
					{
						while(fileIn.hasNextLine());
						{
							String line= fileIn.nextLine()+"\n";
							textArea.append(line);
							
						}
					}
				} catch (FileNotFoundException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				
				finally {
					fileIn.close();
				}
				
				
			}
			
		}
		if(e.getSource()== saveItem)
		{
			JFileChooser filechooser=new JFileChooser();
			filechooser.setCurrentDirectory(new File("."));
			
			int response=filechooser.showSaveDialog(null);
			
			if(response == JFileChooser.APPROVE_OPTION)
				
			{
				File file;
				PrintWriter fileOut = null;
				
				file=new File(filechooser.getSelectedFile().getAbsolutePath());
				
				try {
					fileOut = new PrintWriter(file);
					fileOut.println(textArea.getText());
				} catch (FileNotFoundException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				finally {
					fileOut.close();
				}
				
				
				
			}
			
			
		}
		
		if(e.getSource()==exitItem)
		{
			System.exit(0);
		}
	}
}
